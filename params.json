{"name":"Scrabble-solver","body":"# Scrabble Solver\r\n\r\nThis is a command line Scrabble solver written in Ruby. Its purpose is to find\r\nall of the possible words given a set of tiles and some optional arguments.\r\n\r\n# Installation\r\n\r\nDead simple. you need to have Ruby >= 1.9.2 installed on your system and then just\r\nexecute:\r\n\r\n    $ gem install scrabble-solver\r\n\r\n# Usage\r\n\r\n## Basic\r\n\r\nLet's start with the basics, a simple set of tiles:\r\n\r\n    $ scrabble-solver tehre\r\n\r\nThis will return a list of words, among them will be \"there\", \"three\", \"thee\"\r\nand so on.\r\n\r\n## Controlling length\r\n\r\nIf you only want words that are longer than 5 letters returned, that's easy:\r\n\r\n    $ scrabble-solver tehre --longer-than 5\r\n\r\nIf you only want words that are *shorter* than 4 letters, that's easy too:\r\n\r\n    $ scrabble-solver tehre --shorter-than 4\r\n\r\nYou can, of course, combine these if you want:\r\n\r\n    $ scrabble-solver tehre --shorter-than 6 --longer-than 3\r\n\r\n## Filtering by starts-with and ends-with\r\n\r\nThis is pretty self explanatory. If you only want words that start with \"th\",\r\nyou would do something like this:\r\n\r\n    $ scrabble-solver tehre --starts-with th\r\n\r\nAnd the same goes for ends-with:\r\n\r\n    $ scrabble-solver tehre --ends-with re\r\n\r\n## Blank tiles (wildcards)\r\n\r\nGot a blank tile? No problem!\r\n\r\n    $ scrabble-solver \"tehre?\"\r\n\r\nYou need to wrap the tiles you have in double quotes, otherwise the terminal\r\nwill shout at you. It doesn't matter where you put the question mark(s), they\r\nwill register fine wherever you put them and you can have as many as you want.\r\n\r\n## Being specific\r\n\r\nSay you've got a really sweet triple letter lined up that will only work if\r\nyour Z is the first letter in the word, check this out:\r\n\r\n    $ scrabble-solver zloogsti --contains z --at 1\r\n\r\nYou can also use wildcards in the `--contains` flag:\r\n\r\n    $ scrabble-solver zloogsti --contains z?o --at 1\r\n\r\nThis will match z, anything, o and then anything after that. So \"zoo\"\r\nwill match beautifully.\r\n\r\nIf you don't feel like specifying an `--at` flag, you don't have to.\r\nThis will return \"zoology\" just fine:\r\n\r\n    $ scrabble-solver zlogoyo --contains gy\r\n\r\n# Word lists\r\n\r\nThis current version uses the standard Unix word list, but it is designed in\r\nsuch a way that you can use whatever word list you please.\r\n\r\nTo specify a new word file, you would do the following:\r\n\r\n    $ scrabble-solver letters --word-file /path/to/new/word/file.txt\r\n\r\nThe word file needs to be a file that contains a list of words, one word per\r\nline. The words can be whatever you want, the solver really doesn't care.\r\n","tagline":"A command line scrabble solver written in Ruby.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}